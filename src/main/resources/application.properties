###means well config
###and!if using sql, User's @table should be recovered

#for nginx test
#server.servlet.context-path=/paiban

server.servlet.session.timeout=9600
spring.datasource.url=jdbc:postgresql://172.26.131.120:5432/stm?sslmode=disable&currentSchema=xu_xi_rd2
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=xu_xi
spring.datasource.password=ac3a43f8
spring.datasource.max-active=16
server.port=8083


#spring.datasource.url=jdbc:h2:file:~/webeditor;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1
#spring.datasource.url=jdbc:h2:file:~/ab;MVCC=TRUE

###spring.datasource.url=jdbc:h2:tcp://localhost/~/ab2;MVCC=TRUE
###spring.datasource.driverClassName =org.h2.Driver
###spring.datasource.username=sa
###spring.datasource.password= 

# Each user has connection limit, set this value according to the limit.


#server.context-path=/stm-sample-project-cheng_x

# Thymeleaf \u7F16\u7801
spring.thymeleaf.encoding=UTF-8
# \u70ED\u90E8\u7F72\u9759\u6001\u6587\u4EF6
spring.thymeleaf.cache=false
# \u4F7F\u7528HTML5\u6807\u51C6
spring.thymeleaf.mode=HTML5
spring.thymeleaf.prefix=classpath:/templates/

# \u4F7F\u7528 H2 \u63A7\u5236\u53F0
spring.h2.console.enabled=true

# JPA
#spring.jpa.database=mysql
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

#spring.jpa.database-platform: cn.zhenyang.cap.galaxy.dialect.JsonbPostgresDialect

#rabbitmq
#spring.rabbitmq.host=127.0.0.1
#test local ip
spring.rabbitmq.host=172.26.142.67
#for docker
#spring.rabbitmq.host=172.17.0.2
#5672 is correct
spring.rabbitmq.port=5672
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest
#test local ip
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
spring.rabbitmq.virtual-host=/
spring.rabbitmq.listener.simple.concurrency= 10
spring.rabbitmq.listener.simple.max-concurrency= 10
spring.rabbitmq.listener.simple.prefetch= 1
spring.rabbitmq.listener.simple.auto-startup=true
spring.rabbitmq.listener.simple.default-requeue-rejected= true
spring.rabbitmq.template.retry.enabled=true 
spring.rabbitmq.template.retry.initial-interval=1000 
spring.rabbitmq.template.retry.max-attempts=3
spring.rabbitmq.template.retry.max-interval=10000
spring.rabbitmq.template.retry.multiplier=1.0

#kafka
#============== kafka ===================
# \u6307\u5B9Akafka \u4EE3\u7406\u5730\u5740\uFF0C\u53EF\u4EE5\u591A\u4E2A
#spring.kafka.bootstrap-servers=127.0.0.1:9092
spring.kafka.bootstrap-servers=172.26.142.67:9092
#=============== provider  =======================

spring.kafka.producer.retries=0
# \u6BCF\u6B21\u6279\u91CF\u53D1\u9001\u6D88\u606F\u7684\u6570\u91CF
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432

# \u6307\u5B9A\u6D88\u606Fkey\u548C\u6D88\u606F\u4F53\u7684\u7F16\u89E3\u7801\u65B9\u5F0F
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#=============== consumer  =======================
# \u6307\u5B9A\u9ED8\u8BA4\u6D88\u8D39\u8005group id
spring.kafka.consumer.group-id=test-consumer-group

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=100

# \u6307\u5B9A\u6D88\u606Fkey\u548C\u6D88\u606F\u4F53\u7684\u7F16\u89E3\u7801\u65B9\u5F0F
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300
spring.data.elasticsearch.cluster-nodes=172.26.142.67:9300